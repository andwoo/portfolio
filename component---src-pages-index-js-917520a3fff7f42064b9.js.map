{"version":3,"sources":["webpack:///./src/styles/project.module.scss","webpack:///./src/components/project.js","webpack:///./src/pages/index.js"],"names":["module","exports","Project","props","onMouseEnter","event","setState","isHovered","onMouseLeave","getHoverStyle","defaultColor","state","link","current","color","createRef","render","this","title","description","path","main","backgroundColor","to","ref","className","styles","container","imageContainer","style","image","name","objectFit","textContainer","React","PureComponent","pageQuery","IndexPage","allMarkdownRemark","data","titleContent","edges","map","index","key","node","frontmatter"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,UAAY,mCAAmC,eAAiB,yCAAyC,MAAQ,+BAA+B,cAAgB,wCAAwC,MAAQ,+BAA+B,YAAc,uC,iLCI1PC,E,YACnB,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MAOFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAACC,WAAW,KATT,EAYnBC,aAAe,SAACH,GACd,EAAKC,SAAS,CAACC,WAAW,KAbT,EAgBnBE,cAAgB,SAACC,GACf,OAAO,EAAKC,MAAMJ,WAAa,EAAKK,KAAKC,QAAU,EAAKD,KAAKC,QAAQJ,gBAAkB,CAAEK,MAAOJ,IAfhG,EAAKE,KAAOG,sBACZ,EAAKJ,MAAQ,CACXJ,WAAW,GAJI,E,oCAoBnBS,OAAA,WAAU,IAAD,EACqDC,KAAKd,MAAzDe,EADD,EACCA,MAAOC,EADR,EACQA,YAAaC,EADrB,EACqBA,KAAMC,EAD3B,EAC2BA,KAAMC,EADjC,EACiCA,gBACxC,OACE,gCACE,kBAAC,IAAD,CAAWC,GAAIH,EAAMI,IAAKP,KAAKL,KAAMR,aAAca,KAAKb,aAAcI,aAAcS,KAAKT,aAAcM,MAAM,WAC3G,yBAAKW,UAAWC,IAAOC,WACrB,yBACEF,UAAWC,IAAOE,eAClBC,MAAO,CAAEP,gBAAiBA,IAE1B,kBAAC,IAAD,CAAOG,UAAWC,IAAOI,MAAOC,KAAMV,EAAMW,UAAU,WAExD,gCAAYP,UAAWC,IAAOO,eAC5B,uBAAGR,UAAWC,IAAOR,MAAOW,MAAOZ,KAAKR,cAAc,YAAaS,GACnE,uBAAGO,UAAWC,IAAOP,YAAaU,MAAOZ,KAAKR,cAAc,YAAaU,Q,GAnClDe,IAAMC,eCkB9BC,EAAS,aAoBPC,UAtCG,SAAC,GAAc,IACvBC,EADsB,EAAXC,KACXD,kBAGR,OACE,kBAAC,IAAD,CAAQpB,MAAM,gBAAgBsB,aAHd,+LAId,yBAAKf,UAAU,wBACZa,EAAkBG,MAAMC,KAAI,SAACH,EAAMI,GAClC,OACE,yBAAKC,IAAKD,EAAOlB,UAAU,uBACzB,kBAAC,EAAYc,EAAKM,KAAKC","file":"component---src-pages-index-js-917520a3fff7f42064b9.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"project-module--container--1aJcA\",\"imageContainer\":\"project-module--image-container--PlLY_\",\"image\":\"project-module--image--ppMA7\",\"textContainer\":\"project-module--text-container--1n4nZ\",\"title\":\"project-module--title--s9Nbc\",\"description\":\"project-module--description--2dSf0\"};","import React, { createRef } from 'react';\nimport { ColorLink } from './colorlink';\nimport Image from './image';\nimport styles from '../styles/project.module.scss';\n\nexport default class Project extends React.PureComponent{\n  constructor(props) {\n    super(props);\n    this.link = createRef();\n    this.state = {\n      isHovered: false\n    }\n  }\n\n  onMouseEnter = (event) => {\n    this.setState({isHovered: true});\n  }\n\n  onMouseLeave = (event) => {\n    this.setState({isHovered: false});\n  }\n\n  getHoverStyle = (defaultColor) => {\n    return this.state.isHovered && this.link.current ? this.link.current.getHoverStyle() : { color: defaultColor };\n  }\n\n  render() {\n    const { title, description, path, main, backgroundColor } = this.props;\n    return (\n      <figure>\n        <ColorLink to={path} ref={this.link} onMouseEnter={this.onMouseEnter} onMouseLeave={this.onMouseLeave} color=\"#000000\">\n          <div className={styles.container}>\n            <div\n              className={styles.imageContainer}\n              style={{ backgroundColor: backgroundColor }}\n            >\n              <Image className={styles.image} name={main} objectFit=\"cover\" />\n            </div>\n            <figcaption className={styles.textContainer}>\n              <p className={styles.title} style={this.getHoverStyle(\"#000000\")}>{title}</p>\n              <p className={styles.description} style={this.getHoverStyle(\"#757575\")}>{description}</p>\n            </figcaption>\n          </div>\n        </ColorLink>\n      </figure>\n    );\n  }\n}","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/layout';\nimport Project from '../components/project';\n\nconst IndexPage = ({ data }) => {\n  const { allMarkdownRemark } = data;\n  const titleContent = `I'm an Ottawa based developer with a background in game, mobile and web development. Always striving to be the best I can be; my passion is to continuously learn and deliver quality code.`;\n\n  return (\n    <Layout title=\"Andrew Manley\" titleContent={titleContent}>\n      <div className=\"columns is-multiline\">\n        {allMarkdownRemark.edges.map((data, index) => {\n          return (\n            <div key={index} className=\"column is-one-third\">\n              <Project {...data.node.frontmatter} />\n            </div>\n          );\n        })}\n      </div>\n    </Layout>\n  );\n};\nexport const pageQuery = graphql`\n  {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { type: { eq: \"project\" } } }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            description\n            path\n            main\n            backgroundColor\n          }\n        }\n      }\n    }\n  }\n`;\nexport default IndexPage;\n"],"sourceRoot":""}